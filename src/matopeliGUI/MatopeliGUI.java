package matopeliGUI;

import java.awt.Color;
import java.awt.Graphics;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.image.BufferedImage;
import java.util.ArrayList;
import javax.swing.JOptionPane;
import javax.swing.Timer;
import matopeli.Logiikka;
import matopeli.Score;

/**
 * Luokka toteuttaa matopelin käyttöliittymän
 *
 * @author Kalle
 */
public class MatopeliGUI extends javax.swing.JFrame {

    Logiikka peli = new Logiikka();
    Timer kello;
    Kuuntelija kuuntelija = new Kuuntelija();
    BufferedImage bf;
    int pelimuoto = 0;
    private int scale = 10;

    private class Kuuntelija implements ActionListener {

        private String kentta;
        private int delay;

        public Kuuntelija() {
            kentta = "classic";
            peli.setNopeus(100);
            pelimuoto = 0;
            delay = 0;
        }

        public void asetaKentta(String nimi) {
            this.kentta = nimi;
            peli.reset(nimi);
        }

        public void reset() {
            peli.reset(kentta);
        }

        public void asetaNopeus(int nopeus) {
            peli.setNopeus(nopeus);
            kello.setDelay(peli.getNopeus());
            pelimuoto = 0;
        }

        public void asetaKasvavaNopeus() {
            kello.setDelay(200);
            peli.setNopeus(1);
            pelimuoto = 1;
            delay = 0;
        }

        @Override
        public void actionPerformed(ActionEvent ae) {

            if (peli.etene() == true) {
                repaint();

                if (pelimuoto == 1) {
                    delay = delay + 1;
                    if (delay == 5 && kello.getDelay() > 20) {
                        kello.setDelay(kello.getDelay() - 1);
                        delay = 0;
                    }
                }
            } else {
                kello.stop();
                if (pelimuoto == 0) {
                    showScore(peli.getNopeus());
                } else {
                    showScore(1);
                }
                peli.reset(kentta);
                if (pelimuoto == 1) {
                    this.asetaKasvavaNopeus();
                }
                repaint();
            }
        }
    }

    /**
     * Creates new form matopeliGUI2
     */
    public MatopeliGUI() {

        initComponents();
        this.setLocationRelativeTo(null); //asettaa ikkunan keskellä näyttöä
        kello = new Timer(100, kuuntelija);
        this.setSize(peli.getKentanLeveys() * scale + 60, peli.getKentanKorkeus() * scale + 110);
        bf = new BufferedImage(1110, 1260, BufferedImage.TYPE_INT_RGB);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jMenuBar2 = new javax.swing.JMenuBar();
        jMenu4 = new javax.swing.JMenu();
        jMenu5 = new javax.swing.JMenu();
        scoreLabel = new javax.swing.JLabel();
        TopScoreLabel = new javax.swing.JLabel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenuLevel = new javax.swing.JMenu();
        jMenuItemKenttaCalssic = new javax.swing.JMenuItem();
        jMenuItemKenttaNoWalls = new javax.swing.JMenuItem();
        jMenuItemKenttaCross = new javax.swing.JMenuItem();
        jMenuItemKenttaHuge = new javax.swing.JMenuItem();
        jMenuSpeed = new javax.swing.JMenu();
        jMenuItemNpeusFast = new javax.swing.JMenuItem();
        jMenuItemNopeusNormal = new javax.swing.JMenuItem();
        jMenuItemNopeusSlow = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        jMenuItemNopeusIncreasing = new javax.swing.JMenuItem();
        jMenuHelp = new javax.swing.JMenu();
        jMenuItemHelpControls = new javax.swing.JMenuItem();

        jMenu4.setText("File");
        jMenuBar2.add(jMenu4);

        jMenu5.setText("Edit");
        jMenuBar2.add(jMenu5);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Matopeli");
        setBackground(new java.awt.Color(255, 255, 255));
        setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        setResizable(false);
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        scoreLabel.setBackground(new java.awt.Color(255, 255, 255));
        scoreLabel.setLabelFor(this);
        scoreLabel.setText("Score");
        scoreLabel.setMaximumSize(new java.awt.Dimension(37, 20));
        scoreLabel.setMinimumSize(new java.awt.Dimension(37, 20));
        scoreLabel.setPreferredSize(new java.awt.Dimension(37, 20));

        TopScoreLabel.setBackground(new java.awt.Color(255, 255, 255));
        TopScoreLabel.setText("TopScore");
        TopScoreLabel.setMaximumSize(new java.awt.Dimension(60, 20));
        TopScoreLabel.setMinimumSize(new java.awt.Dimension(60, 20));
        TopScoreLabel.setPreferredSize(new java.awt.Dimension(60, 20));

        jMenuLevel.setText("level");
        jMenuLevel.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenuLevelMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
                jMenuLevelMenuDeselected(evt);
            }
        });

        jMenuItemKenttaCalssic.setText("classic");
        jMenuItemKenttaCalssic.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemKenttaCalssicActionPerformed(evt);
            }
        });
        jMenuLevel.add(jMenuItemKenttaCalssic);

        jMenuItemKenttaNoWalls.setText("no walls");
        jMenuItemKenttaNoWalls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemKenttaNoWallsActionPerformed(evt);
            }
        });
        jMenuLevel.add(jMenuItemKenttaNoWalls);

        jMenuItemKenttaCross.setText("cross");
        jMenuItemKenttaCross.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemKenttaCrossActionPerformed(evt);
            }
        });
        jMenuLevel.add(jMenuItemKenttaCross);

        jMenuItemKenttaHuge.setText("huge");
        jMenuItemKenttaHuge.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemKenttaHugeActionPerformed(evt);
            }
        });
        jMenuLevel.add(jMenuItemKenttaHuge);

        jMenuBar1.add(jMenuLevel);

        jMenuSpeed.setText("speed");
        jMenuSpeed.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenuSpeedMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
                jMenuSpeedMenuDeselected(evt);
            }
        });

        jMenuItemNpeusFast.setText("fast");
        jMenuItemNpeusFast.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNpeusFastActionPerformed(evt);
            }
        });
        jMenuSpeed.add(jMenuItemNpeusFast);

        jMenuItemNopeusNormal.setText("normal");
        jMenuItemNopeusNormal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNopeusNormalActionPerformed(evt);
            }
        });
        jMenuSpeed.add(jMenuItemNopeusNormal);

        jMenuItemNopeusSlow.setText("slow");
        jMenuItemNopeusSlow.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNopeusSlowActionPerformed(evt);
            }
        });
        jMenuSpeed.add(jMenuItemNopeusSlow);
        jMenuSpeed.add(jSeparator1);

        jMenuItemNopeusIncreasing.setText("increasing");
        jMenuItemNopeusIncreasing.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemNopeusIncreasingActionPerformed(evt);
            }
        });
        jMenuSpeed.add(jMenuItemNopeusIncreasing);

        jMenuBar1.add(jMenuSpeed);

        jMenuHelp.setText("help");
        jMenuHelp.addMenuListener(new javax.swing.event.MenuListener() {
            public void menuCanceled(javax.swing.event.MenuEvent evt) {
            }
            public void menuSelected(javax.swing.event.MenuEvent evt) {
                jMenuHelpMenuSelected(evt);
            }
            public void menuDeselected(javax.swing.event.MenuEvent evt) {
                jMenuHelpMenuDeselected(evt);
            }
        });

        jMenuItemHelpControls.setText("controls");
        jMenuItemHelpControls.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jMenuItemHelpControlsActionPerformed(evt);
            }
        });
        jMenuHelp.add(jMenuItemHelpControls);

        jMenuBar1.add(jMenuHelp);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(26, 26, 26)
                .addComponent(scoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 76, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 42, Short.MAX_VALUE)
                .addComponent(TopScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(28, 28, 28))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(scoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(TopScoreLabel, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(200, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        // TODO add your handling code here:
        int nappain = evt.getKeyCode();
        //System.out.println(nappain);

        if (nappain == 38 && kello.isRunning() == true) {  // ylänuoli
            peli.asetaSuunta("ylös");
        } else if (nappain == 40 && kello.isRunning() == true) {  // alanuoli
            peli.asetaSuunta("alas");
        } else if (nappain == 37 && kello.isRunning() == true) { // vasennuoli
            peli.asetaSuunta("vasemmalle");
        } else if (nappain == 39 && kello.isRunning() == true) { // oikeanuoli
            peli.asetaSuunta("oikealle");
        } else if (nappain == 32 && kello.isRunning() == true) { //Space
            kello.stop();
        } else if (nappain == 32 && kello.isRunning() == false) { //Space
            kello.start();
        } else if (nappain == 521) { // +
            zoomIn();
        } else if (nappain == 45) { // -
            zoomOut();
        }
    }//GEN-LAST:event_formKeyPressed

    private void jMenuItemKenttaCalssicActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemKenttaCalssicActionPerformed
        // TODO add your handling code here:
        kello.stop();
        kuuntelija.asetaKentta("classic");
        this.setSize(peli.getKentanLeveys() * scale + 60, peli.getKentanKorkeus() * scale + 110);
        repaint();
    }//GEN-LAST:event_jMenuItemKenttaCalssicActionPerformed

    private void jMenuItemKenttaNoWallsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemKenttaNoWallsActionPerformed
        // TODO add your handling code here:
        kello.stop();
        kuuntelija.asetaKentta("nowalls");
        this.setSize(peli.getKentanLeveys() * scale + 60, peli.getKentanKorkeus() * scale + 110);
        repaint();
    }//GEN-LAST:event_jMenuItemKenttaNoWallsActionPerformed

    private void jMenuItemKenttaCrossActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemKenttaCrossActionPerformed
        // TODO add your handling code here:
        kello.stop();
        kuuntelija.asetaKentta("cross");
        this.setSize(peli.getKentanLeveys() * scale + 60, peli.getKentanKorkeus() * scale + 110); // leveys, korkeus
        // leveys: 280 
        // korkeus: 330
        repaint();
    }//GEN-LAST:event_jMenuItemKenttaCrossActionPerformed

    private void jMenuItemNpeusFastActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNpeusFastActionPerformed
        // TODO add your handling code here:
        kello.stop();
        kuuntelija.asetaNopeus(50);
        kuuntelija.reset();
        repaint();
    }//GEN-LAST:event_jMenuItemNpeusFastActionPerformed

    private void jMenuItemNopeusNormalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNopeusNormalActionPerformed
        // TODO add your handling code here:
        kello.stop();
        kuuntelija.asetaNopeus(100);
        kuuntelija.reset();
        repaint();
    }//GEN-LAST:event_jMenuItemNopeusNormalActionPerformed

    private void jMenuItemNopeusSlowActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNopeusSlowActionPerformed
        // TODO add your handling code here:
        kuuntelija.asetaNopeus(150);
        kuuntelija.reset();
        repaint();
    }//GEN-LAST:event_jMenuItemNopeusSlowActionPerformed

    private void jMenuItemKenttaHugeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemKenttaHugeActionPerformed
        // TODO add your handling code here:
        kuuntelija.asetaKentta("huge");
        this.setSize(peli.getKentanLeveys() * scale + 60, peli.getKentanKorkeus() * scale + 110);
        repaint();
    }//GEN-LAST:event_jMenuItemKenttaHugeActionPerformed

    private void jMenuLevelMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuLevelMenuSelected
        // TODO add your handling code here:
        kello.stop();
    }//GEN-LAST:event_jMenuLevelMenuSelected

    private void jMenuSpeedMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuSpeedMenuSelected
        // TODO add your handling code here:
        kello.stop();
    }//GEN-LAST:event_jMenuSpeedMenuSelected

    private void jMenuHelpMenuSelected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuHelpMenuSelected
        // TODO add your handling code here:
        kello.stop();
    }//GEN-LAST:event_jMenuHelpMenuSelected

    private void jMenuLevelMenuDeselected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuLevelMenuDeselected
        // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_jMenuLevelMenuDeselected

    private void jMenuSpeedMenuDeselected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuSpeedMenuDeselected
        // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_jMenuSpeedMenuDeselected

    private void jMenuHelpMenuDeselected(javax.swing.event.MenuEvent evt) {//GEN-FIRST:event_jMenuHelpMenuDeselected
        // TODO add your handling code here:
        repaint();
    }//GEN-LAST:event_jMenuHelpMenuDeselected

    private void jMenuItemNopeusIncreasingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemNopeusIncreasingActionPerformed
        // TODO add your handling code here:
        kello.stop();
        kuuntelija.asetaKasvavaNopeus();
        kuuntelija.reset();
        repaint();
    }//GEN-LAST:event_jMenuItemNopeusIncreasingActionPerformed

    private void jMenuItemHelpControlsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jMenuItemHelpControlsActionPerformed
        // TODO add your handling code here:
        JOptionPane.showMessageDialog(this, 
                  "Space = Start / Pause \n"
                + "Arrow keys = change direction \n"
                + "+ = zoom in \n"
                + "- = zoom out", "Controls", JOptionPane.PLAIN_MESSAGE);
    }//GEN-LAST:event_jMenuItemHelpControlsActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /*
         * Set the Nimbus look and feel
         */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /*
         * If Nimbus (introduced in Java SE 6) is not available, stay with the
         * default look and feel. For details see
         * http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MatopeliGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MatopeliGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MatopeliGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MatopeliGUI.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /*
         * Create and display the form
         */
        java.awt.EventQueue.invokeLater(new Runnable() {

            @Override
            public void run() {
                new MatopeliGUI().setVisible(true);
            }
        });
    }

    /**
     * piirtää kentän ruudulle
     *
     * @param g
     */
    public void animation(Graphics g) {
        super.paint(g);

        scoreLabel.setText("Score: " + peli.pisteet());
        TopScoreLabel.setText("Top Score: " + peli.pisteetMax(pelimuoto));

        int[][] alue = peli.getKentta();

        for (int i = 0; i < alue.length; i++) {
            for (int j = 0; j < alue[i].length; j++) {
                if (alue[i][j] == 0) {
                    g.setColor(Color.WHITE);
                } else if (alue[i][j] == 1) {
                    g.setColor(Color.BLACK);
                } else if (alue[i][j] == 3) {
                    g.setColor(Color.red);
                } else {
                    g.setColor(Color.pink);
                }
                g.fillRect(j * scale + 30, i * scale + 80, scale - 1, scale - 1);
            }
        }
    }

    @Override
    public void paint(Graphics g) {
        animation(bf.getGraphics()); //bf is the BufferedImage object
        g.drawImage(bf, 0, 0, null);
    }

    @Override
    public void update(Graphics g) {
        paint(g);
    }

    private void zoomOut() {
        if (scale >= 9) {
            scale = scale - 2;
            this.setSize(peli.getKentanLeveys() * scale + 60, peli.getKentanKorkeus() * scale + 110);
        }
    }

    private void zoomIn() {
        if (scale <= 20) {
            scale = scale + 2;
            this.setSize(peli.getKentanLeveys() * scale + 60, peli.getKentanKorkeus() * scale + 110);
        }
    }

    /**
     * Näyttää pelin lopussa pisteet
     *
     * @param nopeus
     */
    private void showScore(int nopeus) {

        ArrayList<Score> topScore = peli.getTopScore();
        String pisteet = "";
        for (int i = 0; i < topScore.size(); i++) {
            pisteet = pisteet + (i + 1) + " | " + topScore.get(i).getScore() + " " + topScore.get(i).getNimi() + "\n";
        }
        String pelinNopeus;
        if (nopeus == 1) {
            pelinNopeus = "Increasing";
        } else if (nopeus == 50) {
            pelinNopeus = "Fast";
        } else if (nopeus == 100) {
            pelinNopeus = "Normal";
        } else {
            pelinNopeus = "Slow";
        }


        if (topScore.size() < 5 || topScore.get(topScore.size() - 1).getScore() < peli.pisteet()) {

            String nimi = JOptionPane.showInputDialog(this, "--------------------------------------------------------- \n"
                    + "LEVEL: " + peli.getKentanNimi() + " SPEED: " + pelinNopeus + "\n"
                    + "--------------------------------------------------------- \n"
                    + pisteet
                    + "--------------------------------------------------------- \n"
                    + "You Scored: " + peli.pisteet() + "\n\n"
                    + "Pleace enter name for scoreboard! ", "Game Over, Congratulations!", JOptionPane.PLAIN_MESSAGE);

            if (nimi == null) {
                peli.setScore("Anonymous", nopeus);
            } else if (nimi.equals("")) {
                peli.setScore("Anonymous", nopeus);
            } else {
                peli.setScore(nimi, nopeus);
            }
        } else {
            JOptionPane.showMessageDialog(this, "--------------------------------------------------------- \n"
                    + "LEVEL: " + peli.getKentanNimi() + " SPEED: " + pelinNopeus + "\n"
                    + "--------------------------------------------------------- \n"
                    + pisteet
                    + "--------------------------------------------------------- \n"
                    + "You Scored: " + peli.pisteet() + "\n", "Game Over, you lose", JOptionPane.PLAIN_MESSAGE);
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel TopScoreLabel;
    private javax.swing.JMenu jMenu4;
    private javax.swing.JMenu jMenu5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuBar jMenuBar2;
    private javax.swing.JMenu jMenuHelp;
    private javax.swing.JMenuItem jMenuItemHelpControls;
    private javax.swing.JMenuItem jMenuItemKenttaCalssic;
    private javax.swing.JMenuItem jMenuItemKenttaCross;
    private javax.swing.JMenuItem jMenuItemKenttaHuge;
    private javax.swing.JMenuItem jMenuItemKenttaNoWalls;
    private javax.swing.JMenuItem jMenuItemNopeusIncreasing;
    private javax.swing.JMenuItem jMenuItemNopeusNormal;
    private javax.swing.JMenuItem jMenuItemNopeusSlow;
    private javax.swing.JMenuItem jMenuItemNpeusFast;
    private javax.swing.JMenu jMenuLevel;
    private javax.swing.JMenu jMenuSpeed;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JLabel scoreLabel;
    // End of variables declaration//GEN-END:variables
}
